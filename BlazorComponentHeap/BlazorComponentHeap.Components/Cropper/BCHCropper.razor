@using BlazorComponentHeap.Components.Models.Cropper
@using BlazorComponentHeap.Components.Models.Zoom
<div
    id="@_cropperId"
    style="@($"background: {BackgroundColor}; pointer-events: {(_processingData ? "none" : "all")};")"
    class="bch-cropper-container">

    <BCHZoom @ref="_bchZoom"
             ZoomContext="ZoomContext"
             BoundsByParent="false"
             UseConstraints="false"
             ZoomOnMouseWheel="true"
             UseTouchRotation="true"
             MinScale="@MinScale"
             MaxScale="@MaxScale"
             ViewMode="@ViewMode"
             Factor="ZoomFactor">
        <div class="bch-image-wrapper noselectable-text" draggable="false">
            <img id="@_imageId"
                 class="noselectable-text"
                 draggable="false"
                 @onload="async () => { await _bchZoom.CenterContentAsync(); }"
                 src="@Base64Image"/>
        </div>
    </BCHZoom>

    @switch (CropperType)
    {
        case CropperType.Circle:
            <div
                class="bch-circle-cropper"
                style="@($"width: {_circleSize}px; height: {_circleSize}px;")">
            </div>
            break;
        case CropperType.MovableRectangle:
            <div id="@_rectId"
                 class="@($"bch-rectangular-wrapper {(!_rectDragged && !_rectHandleDragged ? "bch-disabled" : "")}")"
                 @onmouseleave='OnMouseLeaveUpAsync'
                 @onmouseup='OnMouseLeaveUpAsync'>

                <div style="@($"left: {_rectPos.X.ToString(_nF)}px; top: {_rectPos.Y.ToString(_nF)}px; width: {_rectSize.X.ToString(_nF)}px; height: {_rectSize.Y.ToString(_nF)}px; min-width: {MinRectangleWidth}px; min-height: {MinRectangleHeight}px;")"
                     class="@($"bch-cropper-wrapper {(_rectDragged || _rectHandleDragged || ZoomContext.UserInteraction ? "bch-disabled" : "")}")"
                     @onmousedown="async (e) => { await OnMouseDownAsync(e, true); }"
                     @ontouchstart="async (e) => { await OnTouchStartAsync(e, true); }">

                    <div class="@($"bch-handle {(_rectHandleDragged ? "bch-active" : "")}")"
                         @onmousedown:stopPropagation
                         @onmousedown="async (e) => { await OnMouseDownAsync(e, false); }"
                         @ontouchstart:stopPropagation
                         @ontouchstart="async (e) => { await OnTouchStartAsync(e, false); }">
                    </div>
                    
                    <div class="bch-border bch-b1"></div>
                    <div class="bch-border bch-b2"></div>
                    <div class="bch-border bch-b3"></div>
                    <div class="bch-border bch-b4"></div>

                </div>
            </div>
            break;
        case CropperType.FixedRectangle:
            <div id="@_rectId" class="bch-rectangular-wrapper bch-disabled">
                <div style="@($"left: {_rectPos.X.ToString(_nF)}px; top: {_rectPos.Y.ToString(_nF)}px; width: {_rectSize.X.ToString(_nF)}px; height: {_rectSize.Y.ToString(_nF)}px;")"
                     class="bch-cropper-wrapper bch-disabled">
                </div>
            </div>
            break;
        default:
            break;
    }

    <div
        id="@_canvasHolderId"
        class="bch-canvas-holder">
        <canvas id="@_canvasId"></canvas>
    </div>
</div>